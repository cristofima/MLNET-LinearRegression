// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace LinearRegression.MLModels
{
    public partial class WeatherMLModel
    {
        /// <summary>
        /// model input class for WeatherMLModel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Formatted Date")]
            public string Formatted_Date { get; set; }

            [ColumnName(@"Summary")]
            public string Summary { get; set; }

            [ColumnName(@"Precip Type")]
            public string Precip_Type { get; set; }

            [ColumnName(@"Temperature (C)")]
            public float Temperature__C_ { get; set; }

            [ColumnName(@"Apparent Temperature (C)")]
            public float Apparent_Temperature__C_ { get; set; }

            [ColumnName(@"Humidity")]
            public float Humidity { get; set; }

            [ColumnName(@"Wind Speed (km/h)")]
            public float Wind_Speed__km_h_ { get; set; }

            [ColumnName(@"Wind Bearing (degrees)")]
            public float Wind_Bearing__degrees_ { get; set; }

            [ColumnName(@"Visibility (km)")]
            public float Visibility__km_ { get; set; }

            [ColumnName(@"Loud Cover")]
            public float Loud_Cover { get; set; }

            [ColumnName(@"Pressure (millibars)")]
            public float Pressure__millibars_ { get; set; }

            [ColumnName(@"Daily Summary")]
            public string Daily_Summary { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for WeatherMLModel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Formatted Date")]
            public string Formatted_Date { get; set; }

            [ColumnName(@"Summary")]
            public float[] Summary { get; set; }

            [ColumnName(@"Precip Type")]
            public float[] Precip_Type { get; set; }

            [ColumnName(@"Temperature (C)")]
            public float Temperature__C_ { get; set; }

            [ColumnName(@"Apparent Temperature (C)")]
            public float Apparent_Temperature__C_ { get; set; }

            [ColumnName(@"Humidity")]
            public float Humidity { get; set; }

            [ColumnName(@"Wind Speed (km/h)")]
            public float Wind_Speed__km_h_ { get; set; }

            [ColumnName(@"Wind Bearing (degrees)")]
            public float Wind_Bearing__degrees_ { get; set; }

            [ColumnName(@"Visibility (km)")]
            public float Visibility__km_ { get; set; }

            [ColumnName(@"Loud Cover")]
            public float Loud_Cover { get; set; }

            [ColumnName(@"Pressure (millibars)")]
            public float Pressure__millibars_ { get; set; }

            [ColumnName(@"Daily Summary")]
            public string Daily_Summary { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("WeatherMLModel.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
